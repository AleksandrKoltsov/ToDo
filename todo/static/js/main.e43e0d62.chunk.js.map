{"version":3,"sources":["context.js","components/TodoItem.js","components/TodoList.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","list","index","onChange","removeTodo","useContext","classes","completed","push","className","join","type","checked","id","for","title","onClick","TodoList","props","map","item","i","key","onToggle","AddTodo","onCreate","useState","value","setValue","onSubmit","event","preventDefault","trim","target","App","setList","Provider","filter","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sJAGeA,EADCC,IAAMC,gBC2BPC,MA1Bf,YAA6C,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACtBC,EAAcC,qBAAWR,GAAzBO,WACDE,EAAU,GAKhB,OAHGL,EAAKM,WACJD,EAAQE,KAAK,QAGb,4BACI,0BAAMC,UAAWH,EAAQI,KAAK,MAC1B,2BACIC,KAAK,WACLC,QAASX,EAAKM,UACdJ,SAAU,kBAAMA,EAASF,EAAKY,KAC9BA,GAAIX,IAGR,gCAASA,EAAQ,GARrB,WAUI,2BAAOY,IAAKZ,GAAQD,EAAKc,QAE7B,4BAAQN,UAAU,KAAKO,QAAS,kBAAMZ,EAAWH,EAAKY,MAAtD,UCHGI,MAlBf,SAAkBC,GACd,OACI,4BACKA,EAAMjB,KAAKkB,KAAI,SAACC,EAAMC,GACnB,OAAO,kBAAC,EAAD,CACKpB,KAAQmB,EACRE,IAAOF,EAAKP,GACZX,MAASmB,EACTlB,SAAUe,EAAMK,gBCe7BC,MAxBf,YAAgC,IAAbC,EAAY,EAAZA,SAAY,EACDC,mBAAS,IADR,mBACpBC,EADoB,KACbC,EADa,KAW3B,OACI,0BAAMnB,UAAU,cAAcoB,SATlC,SAAuBC,GACnBA,EAAMC,iBACHJ,EAAMK,SACLP,EAASE,GACTC,EAAS,OAMT,2BACIjB,KAAK,OACLgB,MAAOA,EACPxB,SAAU,SAAA2B,GAAK,OAAIF,EAASE,EAAMG,OAAON,QACzClB,UAAU,aAEd,4BAAQE,KAAK,SAASF,UAAU,UAAhC,SCuBGyB,MAtCf,WAAgB,IAAD,EACWpC,IAAM4B,SAAS,IAD1B,mBACNzB,EADM,KACAkC,EADA,KA0Bb,OACI,kBAAC,EAAQC,SAAT,CAAkBT,MAAS,CAAEvB,WAbjC,SAAoBS,GAClBsB,EAAQlC,EAAKoC,QAAO,SAAAjB,GAAI,OAAIA,EAAKP,KAAOA,SAapC,yBAAKJ,UAAU,WACX,0CACA,kBAAC,EAAD,CAASgB,SAZnB,SAAiBV,GACboB,EAAQlC,EAAKqC,OAAO,CAAC,CACjBvB,MAAOA,EACPF,GAAI0B,KAAKC,MACTjC,WAAW,SASRN,EAAKwC,OAAS,kBAAC,EAAD,CAAUxC,KAAQA,EAAMsB,SA5BjD,SAAoBV,GACjBsB,EACIlC,EAAKkB,KAAI,SAAAC,GAIR,OAHGA,EAAKP,KAAOA,IACXO,EAAKb,WAAaa,EAAKb,WAEpBa,SAsB4D,uBAAGX,UAAU,UAAb,eCzBzDiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e43e0d62.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\nexport default Context;","import React, { useContext } from \"react\";\r\nimport Context from \"../context\";\r\n\r\nfunction TodoItem({ list, index, onChange}) { //получаю список в качестве параметра\r\n    const {removeTodo} = useContext(Context);\r\n    const classes = [];\r\n\r\n    if(list.completed){ //определяю состояние тудушки\r\n        classes.push('done'); //если тру то добавляю имя класса в массив (для возможности добавления других классов)\r\n    }\r\n    return (\r\n        <li>\r\n            <span className={classes.join(' ')}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={list.completed} //привязка чекбокса к сосотоянию списка\r\n                    onChange={() => onChange(list.id)} //клик по чекбоксу\r\n                    id={index}\r\n                />\r\n\r\n                <strong>{index + 1}</strong>\r\n                &nbsp;&nbsp;\r\n                <label for={index}>{list.title}</label>\r\n            </span>\r\n            <button className='rm' onClick={() => removeTodo(list.id)}>&times;</button>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default TodoItem;","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nfunction TodoList(props) { //получаю список в качестве параметра\r\n    return (\r\n        <ul>\r\n            {props.list.map((item, i) =>{ //обрабатываю массив списка\r\n                return <TodoItem\r\n                            list = {item}\r\n                            key = {item.id}\r\n                            index = {i}\r\n                            onChange={props.onToggle}\r\n                />; //возвращаю элемент в виде компонента\r\n                // список и\r\n                // указываю дополнительный специальный параметр key с уникальным идентификатором для итерируемого\r\n                // объектав в реакте\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from \"react\";\r\n\r\nfunction AddTodo({ onCreate }) {\r\n    const [value, setValue] = useState('');\r\n    \r\n    function submitHandler(event) { //обработка кнопки AddTodo\r\n        event.preventDefault(); //отменяем стандарное действие submit(перегружает страницу)\r\n        if(value.trim()){ //валидация input\r\n            onCreate(value);\r\n            setValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className='formAddTodo' onSubmit={submitHandler}>\r\n            <input\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={event => setValue(event.target.value)}\r\n                className='addInput'\r\n            />\r\n            <button type='submit' className='addBtn'>Add</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddTodo;","import React from 'react';\nimport TodoList from \"./components/TodoList\";\nimport Context from \"./context\";\nimport AddTodo from \"./components/AddTodo\";\n\n\nfunction App() {\n  const [list, setList] = React.useState([]);\n\n  function toggleTodo(id) { //метод для переключения чекбокса\n     setList(\n         list.map(item => {\n          if(item.id === id) {\n              item.completed = !item.completed;\n          }\n          return item;\n      })\n    )\n  }\n\n  function removeTodo(id){ //удаляет строку\n    setList(list.filter(item => item.id !== id));\n  }\n\n  function addTodo(title) { //добавляю новую запись\n      setList(list.concat([{\n          title: title,\n          id: Date.now(), //использую дату как уникальный идетнтификатор\n          completed: false\n      }]))\n  }\n\n  return (\n      <Context.Provider value = {{ removeTodo }}>\n        <div className=\"wrapper\">\n            <h1>ToDo List:</h1>\n            <AddTodo onCreate={addTodo}/>\n            {list.length ? <TodoList list = {list} onToggle={toggleTodo}/> : <p className='noTodo'>No ToDo!</p>}\n\n        </div>\n      </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}